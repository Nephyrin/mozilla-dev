/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIURI;

// FIXME check all UUIDs
[scriptable, uuid(cb8f3d31-d1e8-4806-96d9-e21c6cc0f7ec)]
interface nsIPluginTag : nsISupports
{
  // enabledState is stored as one of the following as an integer in prefs,
  // so if new states are added, they must not renumber the existing states.
  const unsigned long STATE_DISABLED = 0;
  const unsigned long STATE_CLICKTOPLAY = 1;
  const unsigned long STATE_ENABLED = 2;

  // These are effectively readonly (the setters throw), but may be settable on
  // child interfaces
  /* readonly */ attribute AUTF8String description;
  /* readonly */ attribute AUTF8String filename;
  /* readonly */ attribute AUTF8String fullpath;
  /* readonly */ attribute AUTF8String version;
  /* readonly */ attribute AUTF8String name;

  // The 'nice' name of this plugin, e.g. 'flash' 'java'
  /* readonly */ attribute AUTF8String niceName;

  /**
   * true only if this plugin is "hardblocked" and cannot be enabled.
   */
  // FIXME QI to fakePluginTag possible
  readonly attribute boolean blocklisted; // FIXME implement missing + tests

  // If this plugin is capable of being used (not disabled, blocklisted, etc)
  readonly attribute boolean active;

  // Get a specific nsIBlocklistService::STATE_*
  readonly attribute unsigned long blocklistState;

  readonly attribute boolean disabled;
  readonly attribute boolean clicktoplay;
           attribute unsigned long enabledState;

  readonly attribute PRTime lastModifiedTime;

  void getMimeTypes([optional] out unsigned long aCount,
                    [retval, array, size_is(aCount)] out wstring aResults);
  void getMimeDescriptions([optional] out unsigned long aCount,
                           [retval, array, size_is(aCount)]
                           out wstring aResults);
  void getExtensions([optional] out unsigned long aCount,
                     [retval, array, size_is(aCount)]
                     out wstring aResults);
};

[scriptable, uuid(6d22c968-226d-4156-b230-da6ad6bbf6e8)]
interface nsIFakePluginTag : nsIPluginTag
{
  // constants for registerMode
  //
  // Never register any mimeTypes. Rely solely on supersedeExisting to supersede
  // MIME types already registered to other plugins.
  const uint16_t MIME_REGISTER_NONE = 0;
  // Always register all of our mimeTypes. If supersedeExisting is true, they
  // will take precedence over real plugins, including in navigator.mimeTypes.
  const uint16_t MIME_REGISTER_ALL = 1;
  // Only register ourselves as a plugin if we have mimeTypes not claimed by any
  // other plugin, and only expose those mimeTypes.
  const uint16_t MIME_REGISTER_UNCLAIMED = 2;

  void addMimeType(in AUTF8String mimeType,
                   [optional] in AUTF8String description,
                   [optional] in AUTF8String extensions);
  void removeMimeType(in AUTF8String mimeType);

  // The URI that should be loaded into the tag (as a frame) to handle the
  // plugin. Note that the original data/src value for the plugin is not loaded
  // and will need to be requested by the handler via XHR or similar if desired.
  attribute nsIURI handlerURI;
  // FIXME enforce non-null ^

  // FIXME need to invalidate plugins array on change of parameters
  // FIXME what do we do about 'blocklisted' and the like?

  // How we should go about registering our MIME types, see constants above.
  attribute uint16_t registerMode;

  // If true, we will be used in favor of a real plugin for all mimeTypes we
  // support.
  // NOTE that if REGISTER_NONE is used it is possible that no plugin will claim
  //      a MIME type we support, and said type will never reach plugin code to
  //      be superseded.
  attribute boolean supersedeExisting;

  // These can be filled by the creator to provide the values that will appear
  // in navigator.mimeTypes and similar
  /*attribute AUTF8String description;
  attribute AUTF8String filename;
  attribute AUTF8String fullpath;
  attribute AUTF8String version;
  attribute AUTF8String name;*/ // FIXME DOC

  // FIXME note changing this later causes weirdness
  // attribute AUTF8String niceName;
};
